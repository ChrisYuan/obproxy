// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_common_2eproto();
namespace com {
namespace alipay {
namespace dds {
namespace api {
namespace v1 {
class MarkedMultiReference;
class MarkedMultiReferenceDefaultTypeInternal;
extern MarkedMultiReferenceDefaultTypeInternal _MarkedMultiReference_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class MetaData_AnnotationsEntry_DoNotUse;
class MetaData_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern MetaData_AnnotationsEntry_DoNotUseDefaultTypeInternal _MetaData_AnnotationsEntry_DoNotUse_default_instance_;
class MetaData_LabelsEntry_DoNotUse;
class MetaData_LabelsEntry_DoNotUseDefaultTypeInternal;
extern MetaData_LabelsEntry_DoNotUseDefaultTypeInternal _MetaData_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace api
}  // namespace dds
}  // namespace alipay
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::alipay::dds::api::v1::MarkedMultiReference* Arena::CreateMaybeMessage<::com::alipay::dds::api::v1::MarkedMultiReference>(Arena*);
template<> ::com::alipay::dds::api::v1::MetaData* Arena::CreateMaybeMessage<::com::alipay::dds::api::v1::MetaData>(Arena*);
template<> ::com::alipay::dds::api::v1::MetaData_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::com::alipay::dds::api::v1::MetaData_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::com::alipay::dds::api::v1::MetaData_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::com::alipay::dds::api::v1::MetaData_LabelsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace alipay {
namespace dds {
namespace api {
namespace v1 {

// ===================================================================

class MetaData_AnnotationsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MetaData_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<MetaData_AnnotationsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MetaData_AnnotationsEntry_DoNotUse();
  MetaData_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MetaData_AnnotationsEntry_DoNotUse& other);
  static const MetaData_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetaData_AnnotationsEntry_DoNotUse*>(&_MetaData_AnnotationsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MetaData_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MetaData_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<MetaData_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MetaData_LabelsEntry_DoNotUse();
  MetaData_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MetaData_LabelsEntry_DoNotUse& other);
  static const MetaData_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetaData_LabelsEntry_DoNotUse*>(&_MetaData_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MetaData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.alipay.dds.api.v1.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MetaData* other);
  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> annotations = 3;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_annotations();

  // map<string, string> labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string namespace = 2;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 2;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // @@protoc_insertion_point(class_scope:com.alipay.dds.api.v1.MetaData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MetaData_AnnotationsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::google::protobuf::internal::MapField<
      MetaData_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MarkedMultiReference :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.alipay.dds.api.v1.MarkedMultiReference) */ {
 public:
  MarkedMultiReference();
  virtual ~MarkedMultiReference();

  MarkedMultiReference(const MarkedMultiReference& from);

  inline MarkedMultiReference& operator=(const MarkedMultiReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkedMultiReference(MarkedMultiReference&& from) noexcept
    : MarkedMultiReference() {
    *this = ::std::move(from);
  }

  inline MarkedMultiReference& operator=(MarkedMultiReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarkedMultiReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkedMultiReference* internal_default_instance() {
    return reinterpret_cast<const MarkedMultiReference*>(
               &_MarkedMultiReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MarkedMultiReference* other);
  friend void swap(MarkedMultiReference& a, MarkedMultiReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkedMultiReference* New() const final {
    return CreateMaybeMessage<MarkedMultiReference>(nullptr);
  }

  MarkedMultiReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarkedMultiReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarkedMultiReference& from);
  void MergeFrom(const MarkedMultiReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkedMultiReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string reference = 5;
  int reference_size() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 5;
  const ::std::string& reference(int index) const;
  ::std::string* mutable_reference(int index);
  void set_reference(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reference(int index, ::std::string&& value);
  #endif
  void set_reference(int index, const char* value);
  void set_reference(int index, const char* value, size_t size);
  ::std::string* add_reference();
  void add_reference(const ::std::string& value);
  #if LANG_CXX11
  void add_reference(::std::string&& value);
  #endif
  void add_reference(const char* value);
  void add_reference(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& reference() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_reference();

  // string mark = 1;
  void clear_mark();
  static const int kMarkFieldNumber = 1;
  const ::std::string& mark() const;
  void set_mark(const ::std::string& value);
  #if LANG_CXX11
  void set_mark(::std::string&& value);
  #endif
  void set_mark(const char* value);
  void set_mark(const char* value, size_t size);
  ::std::string* mutable_mark();
  ::std::string* release_mark();
  void set_allocated_mark(::std::string* mark);

  // string parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string namespace = 3;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 3;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // string kind = 4;
  void clear_kind();
  static const int kKindFieldNumber = 4;
  const ::std::string& kind() const;
  void set_kind(const ::std::string& value);
  #if LANG_CXX11
  void set_kind(::std::string&& value);
  #endif
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  ::std::string* mutable_kind();
  ::std::string* release_kind();
  void set_allocated_kind(::std::string* kind);

  // @@protoc_insertion_point(class_scope:com.alipay.dds.api.v1.MarkedMultiReference)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> reference_;
  ::google::protobuf::internal::ArenaStringPtr mark_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr kind_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetaData

// string name = 1;
inline void MetaData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::name() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MetaData.name)
  return name_.GetNoArena();
}
inline void MetaData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MetaData.name)
}
#if LANG_CXX11
inline void MetaData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MetaData.name)
}
#endif
inline void MetaData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MetaData.name)
}
inline void MetaData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MetaData.name)
}
inline ::std::string* MetaData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MetaData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_name() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MetaData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MetaData.name)
}

// string namespace = 2;
inline void MetaData::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::namespace_() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MetaData.namespace)
  return namespace__.GetNoArena();
}
inline void MetaData::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MetaData.namespace)
}
#if LANG_CXX11
inline void MetaData::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MetaData.namespace)
}
#endif
inline void MetaData::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MetaData.namespace)
}
inline void MetaData::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MetaData.namespace)
}
inline ::std::string* MetaData::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MetaData.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_namespace_() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MetaData.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MetaData.namespace)
}

// map<string, string> annotations = 3;
inline int MetaData::annotations_size() const {
  return annotations_.size();
}
inline void MetaData::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
MetaData::annotations() const {
  // @@protoc_insertion_point(field_map:com.alipay.dds.api.v1.MetaData.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
MetaData::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:com.alipay.dds.api.v1.MetaData.annotations)
  return annotations_.MutableMap();
}

// map<string, string> labels = 4;
inline int MetaData::labels_size() const {
  return labels_.size();
}
inline void MetaData::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
MetaData::labels() const {
  // @@protoc_insertion_point(field_map:com.alipay.dds.api.v1.MetaData.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
MetaData::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:com.alipay.dds.api.v1.MetaData.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// MarkedMultiReference

// string mark = 1;
inline void MarkedMultiReference::clear_mark() {
  mark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarkedMultiReference::mark() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MarkedMultiReference.mark)
  return mark_.GetNoArena();
}
inline void MarkedMultiReference::set_mark(const ::std::string& value) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.mark)
}
#if LANG_CXX11
inline void MarkedMultiReference::set_mark(::std::string&& value) {
  
  mark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MarkedMultiReference.mark)
}
#endif
inline void MarkedMultiReference::set_mark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MarkedMultiReference.mark)
}
inline void MarkedMultiReference::set_mark(const char* value, size_t size) {
  
  mark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MarkedMultiReference.mark)
}
inline ::std::string* MarkedMultiReference::mutable_mark() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MarkedMultiReference.mark)
  return mark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkedMultiReference::release_mark() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MarkedMultiReference.mark)
  
  return mark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkedMultiReference::set_allocated_mark(::std::string* mark) {
  if (mark != nullptr) {
    
  } else {
    
  }
  mark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mark);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MarkedMultiReference.mark)
}

// string parent = 2;
inline void MarkedMultiReference::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarkedMultiReference::parent() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MarkedMultiReference.parent)
  return parent_.GetNoArena();
}
inline void MarkedMultiReference::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.parent)
}
#if LANG_CXX11
inline void MarkedMultiReference::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MarkedMultiReference.parent)
}
#endif
inline void MarkedMultiReference::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MarkedMultiReference.parent)
}
inline void MarkedMultiReference::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MarkedMultiReference.parent)
}
inline ::std::string* MarkedMultiReference::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MarkedMultiReference.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkedMultiReference::release_parent() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MarkedMultiReference.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkedMultiReference::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MarkedMultiReference.parent)
}

// string namespace = 3;
inline void MarkedMultiReference::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarkedMultiReference::namespace_() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
  return namespace__.GetNoArena();
}
inline void MarkedMultiReference::set_namespace_(const ::std::string& value) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
}
#if LANG_CXX11
inline void MarkedMultiReference::set_namespace_(::std::string&& value) {
  
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
}
#endif
inline void MarkedMultiReference::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
}
inline void MarkedMultiReference::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
}
inline ::std::string* MarkedMultiReference::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkedMultiReference::release_namespace_() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
  
  return namespace__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkedMultiReference::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MarkedMultiReference.namespace)
}

// string kind = 4;
inline void MarkedMultiReference::clear_kind() {
  kind_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarkedMultiReference::kind() const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MarkedMultiReference.kind)
  return kind_.GetNoArena();
}
inline void MarkedMultiReference::set_kind(const ::std::string& value) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.kind)
}
#if LANG_CXX11
inline void MarkedMultiReference::set_kind(::std::string&& value) {
  
  kind_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.alipay.dds.api.v1.MarkedMultiReference.kind)
}
#endif
inline void MarkedMultiReference::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MarkedMultiReference.kind)
}
inline void MarkedMultiReference::set_kind(const char* value, size_t size) {
  
  kind_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MarkedMultiReference.kind)
}
inline ::std::string* MarkedMultiReference::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MarkedMultiReference.kind)
  return kind_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarkedMultiReference::release_kind() {
  // @@protoc_insertion_point(field_release:com.alipay.dds.api.v1.MarkedMultiReference.kind)
  
  return kind_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarkedMultiReference::set_allocated_kind(::std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kind);
  // @@protoc_insertion_point(field_set_allocated:com.alipay.dds.api.v1.MarkedMultiReference.kind)
}

// repeated string reference = 5;
inline int MarkedMultiReference::reference_size() const {
  return reference_.size();
}
inline void MarkedMultiReference::clear_reference() {
  reference_.Clear();
}
inline const ::std::string& MarkedMultiReference::reference(int index) const {
  // @@protoc_insertion_point(field_get:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  return reference_.Get(index);
}
inline ::std::string* MarkedMultiReference::mutable_reference(int index) {
  // @@protoc_insertion_point(field_mutable:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  return reference_.Mutable(index);
}
inline void MarkedMultiReference::set_reference(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  reference_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MarkedMultiReference::set_reference(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  reference_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MarkedMultiReference::set_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
inline void MarkedMultiReference::set_reference(int index, const char* value, size_t size) {
  reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
inline ::std::string* MarkedMultiReference::add_reference() {
  // @@protoc_insertion_point(field_add_mutable:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  return reference_.Add();
}
inline void MarkedMultiReference::add_reference(const ::std::string& value) {
  reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
#if LANG_CXX11
inline void MarkedMultiReference::add_reference(::std::string&& value) {
  reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
#endif
inline void MarkedMultiReference::add_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
inline void MarkedMultiReference::add_reference(const char* value, size_t size) {
  reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.alipay.dds.api.v1.MarkedMultiReference.reference)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
MarkedMultiReference::reference() const {
  // @@protoc_insertion_point(field_list:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  return reference_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
MarkedMultiReference::mutable_reference() {
  // @@protoc_insertion_point(field_mutable_list:com.alipay.dds.api.v1.MarkedMultiReference.reference)
  return &reference_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace api
}  // namespace dds
}  // namespace alipay
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_common_2eproto
